pipeline {
    agent any

    environment {
        SONARQUBE_ENV = 'sonarqube'                      // Name of SonarQube server in Jenkins config
        IMAGE_NAME = 'your-dockerhub-username/wineapp'   // Replace with your Docker Hub repo
        DOCKER_CREDENTIALS_ID = 'dockerhub'              // Jenkins credential ID
    }

    tools {
        maven 'maven'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/NILAYRAVAL/wineApp.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh '''
                        mvn sonar:sonar \
                        -Dsonar.projectKey=wine-manager-uniqueKey \
                        -Dsonar.projectName=WineApp \
                        -Dsonar.java.binaries=target/classes \
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $IMAGE_NAME .'
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'nilaykumar416', passwordVariable: 'dckr_pat_LQSlortYPp6n5vpjxTA7aXMkg5w')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u nilaykumar416 --password-stdin
                        docker push $IMAGE_NAME
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                echo "Deployment steps go here."
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
